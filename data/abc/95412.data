{'TMP': 'C:\\Users\\GAVIND~1\\AppData\\Local\\Temp', 'PYTHONIOENCODING': 'cp936', 'COMPUTERNAME': 'GAVINDING-PC', 'RVDEBUG_HLPPATH': 'C:\\Program Files\\ARM\\Documentation\\RVD\\1.8\\release\\windows\\OnlineHelp', 'ARMBIN_AXD': 'C:\\Program Files\\ARM\\RDI\\AXD\\1.3.1\\98\\win_32-pentium\\axd.exe', 'PSMODULEPATH': 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'x86 Family 6 Model 37 Stepping 5, GenuineIntel', 'ARMBIN_PRJ2XML': 'C:\\Program Files\\ARM\\IDEs\\CodeWarrior\\RVPlugins\\1.0\\86\\win_32-pentium\\converters\\RVD\\prj2xml.exe', 'LM_LICENSE_FILE': 'c:\\flexlm\\license.dat', 'PROCESSOR_REVISION': '2505', 'SYSTEMROOT': 'C:\\windows', 'PATH': 'D:\\Program Files\\gcc_arm\\bin;C:\\Python27\\;C:\\Python27\\Scripts;C:\\Program Files\\Common Files\\NetSarang;C:\\Program Files\\ARM\\bin\\win_32-pentium;C:\\Program Files\\ARM\\RVD\\Core\\1.8\\734\\win_32-pentium\\bin;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\EgisTec BioExcess\\;C:\\Program Files\\Common Files\\Thunder Network\\KanKan\\Codecs;C:\\Program Files\\Subversion\\bin;C:\\Program Files\\TortoiseSVN\\bin;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\ARM\\RVCT\\Programs\\2.2\\349\\win_32-pentium;C:\\Program Files\\ARM\\Utilities\\FLEXlm\\9.2\\release\\win_32-pentium;C:\\Program Files\\doxygen\\bin;C:\\Python27\\Scripts;D:\\Program Files\\gcc_arm\\bin;C:\\Program Files\\ATMEL Corporation\\AT91-ISP v1.13\\Library\\;C:\\Program Files\\ATMEL Corporation\\AT91-ISP v1.13\\sam-ba 2.9;C:\\Program Files\\ATMEL Corporation\\SAM-BA v2.10', 'WINGDB_ACTIVE': '1', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'VBOX_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'DTEXT_PATH': 'C:\\Program Files\\ARM\\Documentation\\DynaText\\4.1.1\\release\\win_32-pentium\\bin', 'HLPPATH': 'C:\\Program Files\\ARM\\Documentation\\RVD\\1.8\\release\\windows\\OnlineHelp', 'ARMCONF': 'C:\\Program Files\\ARM\\RDI\\armperip\\1.3\\50;C:\\Program Files\\ARM\\RVARMulator\\ARMulator\\1.4.1\\206\\win_32-pentium;C:\\Program Files\\ARM\\RVARMulator\\v6ARMulator\\1.4.1\\238\\win_32-pentium', 'ARMDLL': 'C:\\Program Files\\ARM\\RVARMulator\\ARMulator\\1.4.1\\206\\win_32-pentium;C:\\Program Files\\ARM\\RVARMulator\\v6ARMulator\\1.4.1\\238\\win_32-pentium;C:\\Program Files\\ARM\\RDI\\rdimsvr\\1.3.1\\91\\win_32-pentium;C:\\Program Files\\ARM\\RDI\\Targets\\Remote_A\\1.3.1\\98\\win_32-pentium', 'USERDOMAIN': 'GavinDing-PC', 'PROCESSOR_ARCHITECTURE': 'x86', 'ARMROOT': 'C:\\Program Files\\ARM', 'APR_ICONV_PATH': 'C:\\Program Files\\Subversion\\iconv', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LENOVOTESTLOGFILE': 'preload.log', 'HOMEPATH': '\\Users\\GavinDing', 'ARMBIN_ARMSD': 'C:\\Program Files\\ARM\\RDI\\armsd\\1.3.1\\66\\win_32-pentium\\armsd.exe', 'USERNAME': 'GavinDing', 'LOGONSERVER': '\\\\GAVINDING-PC', 'RVCT22BIN': 'C:\\Program Files\\ARM\\RVCT\\Programs\\2.2\\349\\win_32-pentium', 'RVDEBUG_INSTALL': 'C:\\Program Files\\ARM\\RVD\\Core\\1.8\\734\\win_32-pentium', 'PROGRAMDATA': 'C:\\ProgramData', 'LENOVOTESTPATH': 'c:\\prdv10\\', 'RVCT22LIB': 'C:\\Program Files\\ARM\\RVCT\\Data\\2.2\\349\\lib', 'RVCT22INC': 'C:\\Program Files\\ARM\\RVCT\\Data\\2.2\\349\\include\\windows', 'SESSIONNAME': 'Console', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'CONFIGSETROOT': 'C:\\windows\\ConfigSetRoot', 'WINGDB_PYTHON': 'C:\\Python27\\python.exe', 'MOZ_PLUGIN_PATH': 'C:\\Program Files\\Foxit Software\\Foxit Reader\\plugins\\', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\windows', 'TEMP': 'C:\\Users\\GAVIND~1\\AppData\\Local\\Temp', 'HOMEDRIVE': 'C:', 'PROGRAMFILES': 'C:\\Program Files', 'ARMLMD_LICENSE_FILE': 'C:\\Program Files\\ARM\\Licenses\\license.dat', 'SYSTEMDRIVE': 'C:', 'WINGDB_SPAWNCOOKIE': 'faPXrWZKq9KgSXSb', 'NUMBER_OF_PROCESSORS': '4', 'WINGIDE_USE_QT4': '1', 'APPDATA': 'C:\\Users\\GavinDing\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'USERPROFILE': 'C:\\Users\\GavinDing', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'LOCALAPPDATA': 'C:\\Users\\GavinDing\\AppData\\Local'}